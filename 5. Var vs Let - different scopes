
// Defined with var. Scopes are Global. ===================================

var printNumTwo1;
for (var i1 = 0; i1 < 3; i1++) {
  if (i1 === 2) {
    printNumTwo1 = function() {
      return i1;
    };
  }
}
console.log(printNumTwo1()); // Will return 3

// Defined with let. Scopes are local. =====================================

let printNumTwo2;
for (let i2 = 0; i2 < 3; i2++) {
  if (i2 === 2) {
    printNumTwo2 = function() {
      return i2;
    };
  }
}
console.log(printNumTwo2()); // Will return 2
console.log(i2); // WWill return undefined

// =========================================================================

// In Java, an expression is a line of code that holds some information. 
// An expression becomes a statement when it then carries out an action on that information or variable. 
// A block of code holds any number of statements that you need to keep together.

function checkScope() {
  let i = 'function scope';
  if (true) {
    let i = 'block scope';            // By adding let here the scope of the second i is restricted to the if statement 
    console.log('Block scope i is: ', i);
  }
  console.log('Function scope i is: ', i);
  return i;                           // The function returns function scope
}



